#!/usr/bin/env python3
import argparse
from modules.generate_readme import gen_readme
from urllib.error import URLError
import os
import re


def setup_argparse() -> argparse.ArgumentParser:
    # Setup argparse arguments.
    parser = argparse.ArgumentParser(description='Automatically create README files for codeforce links')
    parser.add_argument('url', 
                        help="The codeforces url")
    parser.add_argument('-d, --dir', 
                        dest="path", 
                        help="The directory where you want to store the file. Defaults to current directory")
    parser.add_argument('-f, --file', 
                        dest="file", 
                        help="The file that you want to change. Defaults to README.md")
    parser.add_argument('--force', 
                        dest="force", 
                        action="store_true", 
                        help="Ignore warnings")
    return parser.parse_args()


def mkreadme(url: str, filepath: str, force=False) -> None:
    # if there is already a readme, if we don't want to overwrite it then fail. Otherwise, ignore it. 
    if os.path.exists(filepath) and not force:
        raise FileExistsError(f"File {filepath} already exists. Run with --force to overwrite")

    # see if there is codeforces in the url, there should be since this only works for codeforces urls.
    # however, if they have the --force flag then let them do it anyway and see what happens.
    r = re.search("codeforces", url)
    if r or force:
        gen_readme(url, filepath)  # generate the readme
    else:
        raise URLError("URL doesn't contain \"codeforces\". Run with --force to overwrite")


if __name__ == "__main__":
    # setup the argparsing
    parser = setup_argparse()

    path = parser.path or "./"
    file = parser.file or "README.md"
    filepath = path+file

    # make the readme
    mkreadme(parser.url, filepath, parser.force)

